deleteclientCallback = function(args)
    if args.client_id == "all" then
        clients = clientManager.GetClients()
        for client in clients
            host = client.Shell.host_computer()
            list = host.show_procs().split(char(10))[1:]
            for item in list
                parsedItem = item.split(" ")
                if parsedItem[4] == "bgprocess" then
                    client.Shell.host_computer().close_program(parsedItem[1].val)
                end if
                if parsedItem[4] == "rshell_client" then
                    client.Shell.host_computer().close_program(parsedItem[1].val)
                end if
            end for
        end for
    else
        client = clientManager.GetClient(args.client_id.val)
        if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")

        host = client.Shell.host_computer()
        list = host.show_procs().split(char(10))[1:]
        for item in list
            parsedItem = item.split(" ")
            if parsedItem[4] == "bgprocess" then
                client.Shell.host_computer().close_program(parsedItem[1].val)
            end if
        end for
    end if
end function
commandManager.registerCommand(Command.New({
    "name": "delclient",
    "description": "Deletes a client",
    "parameters": [
        Parameter.New({
            "name": "client_id",
            "examples": "0/all",
            "required": true
        })
    ],
    "callback": @deleteclientCallback
}))


psCallback = function(args)
    client = clientManager.GetClient(args.client_id.val)
    if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")

    host = client.Shell.host_computer()
    procs = host.show_procs
    list = procs.split(char(10))[1:]
    processes = []
    for item in list
        parsedItem = item.split(" ")
        process = {}
        process.user = parsedItem[0]
        process.pid = parsedItem[1]
        process.cpu = parsedItem[2]
        process.mem = parsedItem[3]
        process.command = parsedItem[4]
        processes.push(process)
    end for

    output = "USER PID CPU MEMORY COMMAND\n"
    for process in processes
        output = output + process.user + " " + process.pid + " " + process.cpu + "% " + process.mem + "Mb " + process.command + "\n"
    end for
    print(formatTable(output))
    return processes
end function
commandManager.registerCommand(Command.New({
    "name": "ps",
    "description": "Lists Processes on a client",
    "parameters": [
        Parameter.New({
            "name": "client_id",
            "examples": "0",
            "required": true
        })
    ],
    "callback": @psCallback
}))

killCallback = function(args)
    client = clientManager.GetClient(args.client_id.val)
    if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")
    client.Shell.host_computer().close_program(args.pid.val)

end function
commandManager.registerCommand(Command.New({
    "name": "kill",
    "description": "Kills a process on a client",
    "parameters": [
        Parameter.New({
            "name": "pid",
            "examples": "4856",
            "required": true
        }),
        Parameter.New({
            "name": "client_id",
            "examples": "0",
            "required": true
        })
    ],
    "callback": @killCallback
}))

shellCallback = function(args)
    client = clientManager.GetClient(args.client_id.val)
    if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")
    client.Shell.start_terminal()
end function
commandManager.registerCommand(Command.New({
    "name": "shell",
    "description": "Launches a shell on the target computer",
    "parameters": [
        Parameter.New({
            "name": "client_id",
            "examples": "0",
            "required": true
        })
    ],
    "callback": @shellCallback
}))

spreadCallback = function(args)
	i = 1
	while i <= args.count.val
		while AutoSpread.spread() == false
			wait(0.1)
		end while
		i = i + 1
	end while
	//clearCommandCallback()
end function
commandManager.registerCommand(Command.New({
    "name": "spread",
    "description": "Auto Spreader",
    "parameters": [
        Parameter.New({
            "name": "count",
            "examples": "5",
            "required": true
        })
    ],
    "callback": @spreadCallback
}))

deleteLogsCallback = function(args)
    if globals.DEBUG then print("<color=#FF0000>[!] WARNING: Greybel Interpreter does not have a system.log file!</color>")
    if args.client_id.lower() == "all" then
        for client in clientManager.GetClients()
            client.deleteLogs()
        end for
    else
        client = clientManager.GetClient(args.client_id.val)
        if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")
        client.deleteLogs()
    end if
end function
commandManager.registerCommand(Command.New({
    "name": "deletelogs",
    "description": "Deletes logs on clients",
    "parameters": [
        Parameter.New({
            "name": "client_id",
            "examples": "0/all",
            "required": true
        })
    ],
    "callback": @deleteLogsCallback
}))

grabCommandCallback = function(args)
    tryCrack = false
    if args.try_crack == "TRUE".lower() then tryCrack = true
    if args.info != "passwords" and args.info != "banks" and args.info != "mails" then return print("<color=#FF0000>Info must be either</color><color=#808080>: passwords, mails, or banks</color>")
    if args.client_id == "all" then
        output = "CLIENT_ID USERNAME HASH/PASSWORD\n"
        for client in clientManager.GetClients()
            if args.info == "passwords" then 
                passwords = client.getPasswords()
                if passwords.len > 0 then
                    for pass in passwords
                        username = pass.split(":")[0]
                        hash = pass.split(":")[1]
                        if tryCrack then 
                            result = dictionary.run(hash)
                            if result != false then hash = result
                        end if
                        output = output + client.ID + " " + username + " " + hash + "\n"
                    end for
                end if
            end if
            if args.info == "banks" then 
                banks = client.getBanks()
                for bank in banks
                    username = bank.split(":")[0]
                    hash = bank.split(":")[1]
                    if tryCrack then 
                        result = dictionary.run(hash)
                        if result != false then hash = result
                    end if
                    output = output + client.ID + " " + username + " " + hash + "\n"
                end for
            end if
            if args.info == "mails" then 
                mails = client.getMails()
                for mail in mails
                    username = mail.split(":")[0]
                    hash = mail.split(":")[1]
                    if tryCrack then 
                        result = dictionary.run(hash)
                        if result != false then hash = result
                    end if
                    output = output + client.ID + " " + username + " " + hash + "\n"
                end for
            end if
        end for
        print(formatTable(output))
    else
        client = clientManager.GetClient(args.client_id.val)
        if not client then return print("<color=#FF0000>[!] There is no client with that ID</color>")
        output = "USERNAME HASH/PASSWORD\n"
        if args.info == "passwords" then 
            passwords = client.getPasswords()
            for pass in passwords
                username = pass.split(":")[0]
                hash = pass.split(":")[1]
                if tryCrack then 
                    result = dictionary.run(hash)
                    if result != false then hash = result
                end if
                output = output + username + " " + hash + "\n"
            end for
        end if
        if args.info == "banks" then 
            banks = client.getBanks()
            for bank in banks
                username = bank.split(":")[0]
                hash = bank.split(":")[1]
                if tryCrack then 
                    result = dictionary.run(hash)
                    if result != false then hash = result
                end if
                output = output + username + " " + hash + "\n"
            end for
        end if
        if args.info == "mails" then 
            mails = client.getMails()
            for mail in mails
                username = mail.split(":")[0]
                hash = mail.split(":")[1]
                if tryCrack then 
                    result = dictionary.run(hash)
                    if result != false then hash = result
                end if
                output = output + username + " " + hash + "\n"
            end for
        end if
        print(formatTable(output))
    end if
end function
commandManager.registerCommand(Command.New({
    "name": "grab",
    "description": "Grabs info from clients",
    "parameters": [
        Parameter.New({
            "name": "info",
            "examples": "passwords/banks/mails",
            "required": true,
        }),
        Parameter.New({
            "name": "client_id",
            "required": false,
            "examples": "0/all",
            "default": "all"
        }),
        Parameter.New({
            "name": "try_crack",
            "required": false,
            "examples": "true/false",
            "default": false
        })
    ],
    "callback": @grabCommandCallback
}))

exitCommandCallback = function(args)
    exit("<color=#00FF00>[+] Exiting...</color>")
end function
commandManager.registerCommand(Command.New({
    "name": "exit",
    "description": "Exits Medusa",
    "callback": @ exitCommandCallback
}))

clientsCommandCallback = function(args)
    computers = "ID TYPE PUBLIC_IP LOCAL_IP USERNAME HOSTNAME\n"
    for client in clientManager.GetClients()
        computers = computers + client.ID + " " + client.Type + " " + client.PublicIp + " " + client.LocalIp + " " + getUser(client.Shell) + " " + client.HostName + "\n"
    end for
    computers = formatTable(computers)
    print(computers)
    print()
end function
commandManager.registerCommand(Command.New({
    "name": "clients",
    "description": "List all connected clients",
    "callback": @clientsCommandCallback
}))

clearCommandCallback = function(args)
    clear_screen()
    info = "CREATED BY: YATTAZE | <color=#00FF00>VERSION " + globals.VERSION + "</color>"
    if globals.DEBUG then info = info + " | <color=#FF0000>DEBUG MODE ACTIVE</color>"
    clear_screen()
    print("<color=#FF0000>                                                                              </color>")
    print("<color=#FF0000>                                         88                                   </color>")
    print("<color=#FF0000>                                         88                                   </color>")
    print("<color=#FF0000>                                         88                                   </color>")
    print("<color=#FF0000>  88,dPYba,,adPYba,   ,adPPYba,  ,adPPYb,88 88       88 ,adPPYba, ,adPPYYba,  </color>")
    print("<color=#FF0000>  88P'   '88'    '8a a8P_____88 a8'    `Y88 88       88 I8[    '' ''     `Y8  </color>")
    print("<color=#FF0000>  88      88      88 8PP''''''' 8b       88 88       88  `'Y8ba,  ,adPPPPP88  </color>")
    print("<color=#FF0000>  88      88      88 '8b,   ,aa '8a,   ,d88 '8a,   ,a88 aa    ]8I 88,    ,88  </color>")
    print("<color=#FF0000>  88      88      88  `'Ybbd8''  `'8bbdP'Y8  `'YbbdP'Y8 `'YbbdP'' `'8bbdP'Y8  </color>")
    print("<color=#FF0000>                                                                              </color>")
    print("")
    print(info)
    print("")
    clientsCommandCallback()
end function
commandManager.registerCommand(Command.New({
    "name": "clear",
    "description": "Clears the screen",
    "callback": @ clearCommandCallback
}))

helpCommandCallback = function(args)
    if args.command == "all" then
        help = "COMMAND DESCRIPTION PARAMETERS\n"
        for command in commandManager.GetCommands()
            command = command.value
            help = help + command.name + " " + command.description.replace(" ", "@")
            if command.parameters.len > 0 then
                help = help + " "
                for param in command.parameters
                    help = help + param.name + ","
                end for
                help = help + "\n"
            else
                help = help + " N/A\n"
            end if
        end for
        output = formatTable(help)
        print(output)
    else
        command = commandManager.GetCommand(args.command)
        if not command then 
            print("<color=#FF0000>[!] " + args.command + " is not a command")
            return
        end if
        print(command.help())
    end if
end function
commandManager.registerCommand(Command.New({
    "name": "help",
    "description": "Shows this help prompt",
    "parameters": [
        Parameter.New({
            "name": "command",
            "required": false,
            "examples": "grab",
            "default": "all"
        })
    ],
    "callback": @helpCommandCallback
}))