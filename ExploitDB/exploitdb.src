ExploitDB = {}
ExploitDB.shell = get_shell()
ExploitDB.host = get_shell().host_computer()

ExploitDB.database = {}
ExploitDB.exploitCount = 0

// Creates db file
ExploitDB.Create = function()
    self.host.touch(home_dir() + "/Config/Medusa", "database.med")
    f = self.host.File(home_dir() + "/Config/Medusa/database.med")
    if not f then return print("Cannot open database!".error())
    
    f.set_content("{}")
end function

// Opens the database
ExploitDB.Open = function()
    f = self.host.File(home_dir() + "/Config/Medusa/database.med")
    if not f then return print("Cannot open database!".error())

    fc = f.get_content()
    self.database = Json.Deserialize(fc, globals.DEBUG)
    self.exploitCount = self.CountExploits()
end function

// Counts total exploits in database
ExploitDB.CountExploits = function()
    c = 0
    for lib in self.database.indexes()
        for ver in self.database[lib].values()
           for mem in ver.values()
            c = c + mem.len()
           end for
        end for
    end for
    return c
end function

//Returns a list of exploits
ExploitDB.GetExploits = function(lib, version)
    if not self.database.hasIndex(lib) then return false
    if not self.database[lib].hasIndex(version) then return false
    return self.database[lib][version]
end function

ExploitDB.AddExploit = function(lib, version, address, value)
    if not self.database.hasIndex(lib) then self.database[lib] = {}
    if not self.database[lib].hasIndex(version) then self.database[lib][version] = {}
    if not self.database[lib][version].hasIndex(address) then self.database[lib][version][address] = []

    self.database[lib][version][address].push(value)
    self.exploitCount = self.CountExploits()
end function

// Saves the DB to file
ExploitDB.Save = function()
    s = Json.Serialize(self.database, globals.DEBUG)
    f = self.host.File(home_dir() + "/Config/Medusa/database.med")
    if not f then return print("Cannot open database for saving!".error())
    f.set_content(s)
end function